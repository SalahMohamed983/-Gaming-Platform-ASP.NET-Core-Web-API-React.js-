// <auto-generated />
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(EGamingDbContext))]
    [Migration("20250929233104_SeedCategories")]
    partial class SeedCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Action"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Indie"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Adventure"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "RPG"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Shooter"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Casual"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Simulation"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Puzzle"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Arcade"
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Platformer"
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Massively Multiplayer"
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Racing"
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Fighting"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FavoritGames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritGames");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Games", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OperateCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("OperateCategoryID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GamesID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("GamesID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OperateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OperateCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OperateCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FavoritGames", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Games", "Games")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Users", "Users")
                        .WithMany("FavoritGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Games", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.OperateCategory", "OperateCategory")
                        .WithMany("Games")
                        .HasForeignKey("OperateCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("OperateCategory");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Images", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Games", "Games")
                        .WithMany("Images")
                        .HasForeignKey("GamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Games", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OperateCategory", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Users", b =>
                {
                    b.Navigation("FavoritGames");
                });
#pragma warning restore 612, 618
        }
    }
}
